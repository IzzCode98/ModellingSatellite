# -*- coding: utf-8 -*-
"""
Created on Mon Nov 07 15:44:36 2016

@author: irg16
"""
'WARMUP TASK: TASK 0'
#Task 0
#This is the warm up task (donâ€™t include this task in your report). 
#By now, you should be very familiar indeed with Simple Harmonic Motion. 
#Simulate the motion of a 2kg mass suspended from a spring which has a constant of 5N/m. 
#Start the system off with different sets of initial conditions and plot your results. 
#Does this match what you expect?

import scipy as sp
import numpy as np
import pylab as pl
import scipy.integrate as spi
#defining imported modules with abbreviated names to make life easier

m=2 #this is the mass
k=5 #this is the spring constant

#SHM equations: a=-w^2 *x
# plot graph for x and v and a where w=(k/m)^0.5
#x is displacement from origin

w=(k/m)#**0.5


#called with the variables to be differentiated
def f(input_data,t): #this defines a function f with parameters input_data and t to have the following properties
  x=input_data[0]
  v=input_data[1] #the second value in the input_data list is speed
  a= -w*x
  return [v,a]
#returns differentiated values
  
  #see notes about defining functions in google Doc

#define t

t=sp.linspace(0.,10.,100) # solving every tenth of a second - more than is needed 
            #the last number (100) represents the number of data points within the given range
            #this defines t for the soln equation


# set initial conditions

max_disp=5.

initial_values=[max_disp,0.] 
            #this defines initial_values for the soln equation

soln=spi.odeint(f,initial_values,t) #this odeint thingy is arranged such that it looks at function f and begins the integration process with the initial_values at steps of t - all of which have already been defined

#soln now has 2 columns, the first being the values of loc for every t step and the second being the values of speed for every t step - these were generated by the above equation using the f loop


x=soln[:,0] #this assigns the first column of soln (including all rows via :) to a value named x
v=soln[:,1] #this assigns the second column of soln (including all rows via :) to a value named v

pl.figure(1)
pl.plot(t,x)
pl.xlabel("time (s)")
pl.ylabel("displacement from origin (m)")

pl.figure(2)
pl.plot(t,v)
pl.xlabel("time (s)")
pl.ylabel("velocity (m/s)")


pl.show() #now this information has been plotted